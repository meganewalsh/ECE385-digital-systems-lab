module generator2(	input		Reset, clk, correct_key,
						input logic  [2:0] array_in[29:0],
					   input integer row_counter,
						output logic [2:0] array_out[29:0],
						output integer new_row 
						);
						
logic  [2:0]  array[29:0];	
		
always_ff @ (posedge clk) begin
	if (Reset) begin
		array_out <= array;
	end
	else begin
		array_out <= array_in;
	end
end

always_ff @ (posedge clk) begin
  if (Reset)
  		new_row <= 0;
  else if (correct_key)
		new_row <= row_counter + 1;
  else
	  	new_row <= row_counter;
end




always_comb begin

		array[29] = 3'b100;
	   array[28] =	3'b010;
		array[27] = 3'b100;
		array[26] = 3'b010;
		array[25] = 3'b100;
		array[24] = 3'b010;
		array[23] = 3'b100;
		array[22] = 3'b010;
		array[21] = 3'b001;
		array[20] = 3'b100;
		array[19] = 3'b010;
		array[18] = 3'b100;
		array[17] = 3'b100;
		array[16] = 3'b010;
		array[15] = 3'b010;
		array[14] = 3'b010;
		array[13] = 3'b010;
		array[12] = 3'b100;
		array[11] = 3'b100;
		array[10] = 3'b010;
		array[9]  = 3'b100;
		array[8]  = 3'b010;
		array[7]  = 3'b001;
		array[6]  = 3'b001;
		array[5]  = 3'b100;
		array[4]  = 3'b100;
		array[3]  = 3'b010;
		array[2]  = 3'b010;
		array[1]  = 3'b100;
		array[0]  = 3'b010;

end						
					
endmodule